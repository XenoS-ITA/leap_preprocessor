// Generated from grammar/leap/LuaLexer.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
import LuaLexerBase from './LuaLexerBase.js';

export default class LuaLexer extends LuaLexerBase {
	public static readonly SEMI = 1;
	public static readonly EQ = 2;
	public static readonly NEW = 3;
	public static readonly CLASS = 4;
	public static readonly EXTENDS = 5;
	public static readonly USING = 6;
	public static readonly FILTER = 7;
	public static readonly IS = 8;
	public static readonly TRY = 9;
	public static readonly CATCH = 10;
	public static readonly THROW = 11;
	public static readonly QUESTMARK = 12;
	public static readonly COMPPLUS = 13;
	public static readonly COMPMINUS = 14;
	public static readonly COMPSTAR = 15;
	public static readonly COMPSLASH = 16;
	public static readonly COMPLL = 17;
	public static readonly COMPGG = 18;
	public static readonly COMPAMP = 19;
	public static readonly COMPPIPE = 20;
	public static readonly COMPCARET = 21;
	public static readonly DEFER = 22;
	public static readonly AT = 23;
	public static readonly BREAK = 24;
	public static readonly GOTO = 25;
	public static readonly DO = 26;
	public static readonly END = 27;
	public static readonly WHILE = 28;
	public static readonly REPEAT = 29;
	public static readonly UNTIL = 30;
	public static readonly IF = 31;
	public static readonly THEN = 32;
	public static readonly ELSEIF = 33;
	public static readonly ELSE = 34;
	public static readonly FOR = 35;
	public static readonly COMMA = 36;
	public static readonly IN = 37;
	public static readonly FUNCTION = 38;
	public static readonly LOCAL = 39;
	public static readonly LT = 40;
	public static readonly GT = 41;
	public static readonly RETURN = 42;
	public static readonly CONTINUE = 43;
	public static readonly CC = 44;
	public static readonly NIL = 45;
	public static readonly FALSE = 46;
	public static readonly TRUE = 47;
	public static readonly DOT = 48;
	public static readonly SQUIG = 49;
	public static readonly MINUS = 50;
	public static readonly POUND = 51;
	public static readonly OP = 52;
	public static readonly CP = 53;
	public static readonly NOT = 54;
	public static readonly LL = 55;
	public static readonly GG = 56;
	public static readonly AMP = 57;
	public static readonly SS = 58;
	public static readonly PER = 59;
	public static readonly COL = 60;
	public static readonly LE = 61;
	public static readonly GE = 62;
	public static readonly AND = 63;
	public static readonly OR = 64;
	public static readonly PLUS = 65;
	public static readonly STAR = 66;
	public static readonly OCU = 67;
	public static readonly CCU = 68;
	public static readonly OB = 69;
	public static readonly CB = 70;
	public static readonly EE = 71;
	public static readonly DD = 72;
	public static readonly PIPE = 73;
	public static readonly CARET = 74;
	public static readonly SLASH = 75;
	public static readonly DDD = 76;
	public static readonly SQEQ = 77;
	public static readonly NOTEQ_ALT = 78;
	public static readonly NAME = 79;
	public static readonly NORMALSTRING = 80;
	public static readonly CHARSTRING = 81;
	public static readonly JENKINSHASHSTRING = 82;
	public static readonly LONGSTRING = 83;
	public static readonly INT = 84;
	public static readonly HEX = 85;
	public static readonly FLOAT = 86;
	public static readonly HEX_FLOAT = 87;
	public static readonly COMMENT = 88;
	public static readonly C_COMMENT = 89;
	public static readonly WS = 90;
	public static readonly NL = 91;
	public static readonly SHEBANG = 92;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "';'", 
                                                            "'='", "'new'", 
                                                            "'class'", "'extends'", 
                                                            "'using'", "'filter'", 
                                                            "'is'", "'try'", 
                                                            "'catch'", "'throw'", 
                                                            "'?'", "'+='", 
                                                            "'-='", "'*='", 
                                                            "'/='", "'<<='", 
                                                            "'>>='", "'&='", 
                                                            "'|='", "'^='", 
                                                            "'defer'", "'@'", 
                                                            "'break'", "'goto'", 
                                                            "'do'", "'end'", 
                                                            "'while'", "'repeat'", 
                                                            "'until'", "'if'", 
                                                            "'then'", "'elseif'", 
                                                            "'else'", "'for'", 
                                                            "','", "'in'", 
                                                            "'function'", 
                                                            "'local'", "'<'", 
                                                            "'>'", "'return'", 
                                                            "'continue'", 
                                                            "'::'", "'nil'", 
                                                            "'false'", "'true'", 
                                                            "'.'", "'~'", 
                                                            "'-'", "'#'", 
                                                            "'('", "')'", 
                                                            "'not'", "'<<'", 
                                                            "'>>'", "'&'", 
                                                            "'//'", "'%'", 
                                                            "':'", "'<='", 
                                                            "'>='", "'and'", 
                                                            "'or'", "'+'", 
                                                            "'*'", "'{'", 
                                                            "'}'", "'['", 
                                                            "']'", "'=='", 
                                                            "'..'", "'|'", 
                                                            "'^'", "'/'", 
                                                            "'...'", "'~='", 
                                                            "'!='" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "SEMI", 
                                                             "EQ", "NEW", 
                                                             "CLASS", "EXTENDS", 
                                                             "USING", "FILTER", 
                                                             "IS", "TRY", 
                                                             "CATCH", "THROW", 
                                                             "QUESTMARK", 
                                                             "COMPPLUS", 
                                                             "COMPMINUS", 
                                                             "COMPSTAR", 
                                                             "COMPSLASH", 
                                                             "COMPLL", "COMPGG", 
                                                             "COMPAMP", 
                                                             "COMPPIPE", 
                                                             "COMPCARET", 
                                                             "DEFER", "AT", 
                                                             "BREAK", "GOTO", 
                                                             "DO", "END", 
                                                             "WHILE", "REPEAT", 
                                                             "UNTIL", "IF", 
                                                             "THEN", "ELSEIF", 
                                                             "ELSE", "FOR", 
                                                             "COMMA", "IN", 
                                                             "FUNCTION", 
                                                             "LOCAL", "LT", 
                                                             "GT", "RETURN", 
                                                             "CONTINUE", 
                                                             "CC", "NIL", 
                                                             "FALSE", "TRUE", 
                                                             "DOT", "SQUIG", 
                                                             "MINUS", "POUND", 
                                                             "OP", "CP", 
                                                             "NOT", "LL", 
                                                             "GG", "AMP", 
                                                             "SS", "PER", 
                                                             "COL", "LE", 
                                                             "GE", "AND", 
                                                             "OR", "PLUS", 
                                                             "STAR", "OCU", 
                                                             "CCU", "OB", 
                                                             "CB", "EE", 
                                                             "DD", "PIPE", 
                                                             "CARET", "SLASH", 
                                                             "DDD", "SQEQ", 
                                                             "NOTEQ_ALT", 
                                                             "NAME", "NORMALSTRING", 
                                                             "CHARSTRING", 
                                                             "JENKINSHASHSTRING", 
                                                             "LONGSTRING", 
                                                             "INT", "HEX", 
                                                             "FLOAT", "HEX_FLOAT", 
                                                             "COMMENT", 
                                                             "C_COMMENT", 
                                                             "WS", "NL", 
                                                             "SHEBANG" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"SEMI", "EQ", "NEW", "CLASS", "EXTENDS", "USING", "FILTER", "IS", "TRY", 
		"CATCH", "THROW", "QUESTMARK", "COMPPLUS", "COMPMINUS", "COMPSTAR", "COMPSLASH", 
		"COMPLL", "COMPGG", "COMPAMP", "COMPPIPE", "COMPCARET", "DEFER", "AT", 
		"BREAK", "GOTO", "DO", "END", "WHILE", "REPEAT", "UNTIL", "IF", "THEN", 
		"ELSEIF", "ELSE", "FOR", "COMMA", "IN", "FUNCTION", "LOCAL", "LT", "GT", 
		"RETURN", "CONTINUE", "CC", "NIL", "FALSE", "TRUE", "DOT", "SQUIG", "MINUS", 
		"POUND", "OP", "CP", "NOT", "LL", "GG", "AMP", "SS", "PER", "COL", "LE", 
		"GE", "AND", "OR", "PLUS", "STAR", "OCU", "CCU", "OB", "CB", "EE", "DD", 
		"PIPE", "CARET", "SLASH", "DDD", "SQEQ", "NOTEQ_ALT", "NAME", "NORMALSTRING", 
		"CHARSTRING", "JENKINSHASHSTRING", "LONGSTRING", "NESTED_STR", "INT", 
		"HEX", "FLOAT", "HEX_FLOAT", "ExponentPart", "HexExponentPart", "EscapeSequence", 
		"DecimalEscape", "HexEscape", "UtfEscape", "Digit", "HexDigit", "SingleLineInputCharacter", 
		"COMMENT", "C_COMMENT", "WS", "NL", "SHEBANG",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, LuaLexer._ATN, LuaLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "LuaLexer.g4"; }

	public get literalNames(): (string | null)[] { return LuaLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return LuaLexer.symbolicNames; }
	public get ruleNames(): string[] { return LuaLexer.ruleNames; }

	public get serializedATN(): number[] { return LuaLexer._serializedATN; }

	public get channelNames(): string[] { return LuaLexer.channelNames; }

	public get modeNames(): string[] { return LuaLexer.modeNames; }

	// @Override
	public action(localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 97:
			this.COMMENT_action(localctx, actionIndex);
			break;
		}
	}
	private COMMENT_action(localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			 this.HandleComment(); 
			break;
		}
	}
	// @Override
	public sempred(localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 101:
			return this.SHEBANG_sempred(localctx, predIndex);
		}
		return true;
	}
	private SHEBANG_sempred(localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return  this.IsLine1Col0() ;
		}
		return true;
	}

	public static readonly _serializedATN: number[] = [4,0,92,748,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
	45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
	2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,
	60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,
	7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,
	74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,
	2,82,7,82,2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,
	89,7,89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,
	7,96,2,97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,1,0,1,0,1,1,
	1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
	1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,
	1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
	1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,
	16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,
	1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,
	23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,
	1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,
	29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,
	1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,
	36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,
	1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
	42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,
	1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,
	48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,53,1,53,1,54,
	1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,59,1,59,1,
	60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,64,1,64,
	1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,70,1,71,1,
	71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,
	1,77,1,77,1,77,1,78,1,78,5,78,498,8,78,10,78,12,78,501,9,78,1,79,1,79,1,
	79,5,79,506,8,79,10,79,12,79,509,9,79,1,79,1,79,1,80,1,80,1,80,5,80,516,
	8,80,10,80,12,80,519,9,80,1,80,1,80,1,81,1,81,5,81,525,8,81,10,81,12,81,
	528,9,81,1,81,1,81,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,5,
	83,542,8,83,10,83,12,83,545,9,83,1,83,3,83,548,8,83,1,84,4,84,551,8,84,
	11,84,12,84,552,1,84,3,84,556,8,84,1,85,1,85,1,85,4,85,561,8,85,11,85,12,
	85,562,1,86,4,86,566,8,86,11,86,12,86,567,1,86,1,86,5,86,572,8,86,10,86,
	12,86,575,9,86,1,86,3,86,578,8,86,1,86,1,86,4,86,582,8,86,11,86,12,86,583,
	1,86,3,86,587,8,86,1,86,4,86,590,8,86,11,86,12,86,591,1,86,1,86,3,86,596,
	8,86,1,87,1,87,1,87,4,87,601,8,87,11,87,12,87,602,1,87,1,87,5,87,607,8,
	87,10,87,12,87,610,9,87,1,87,3,87,613,8,87,1,87,1,87,1,87,1,87,4,87,619,
	8,87,11,87,12,87,620,1,87,3,87,624,8,87,1,87,1,87,1,87,4,87,629,8,87,11,
	87,12,87,630,1,87,1,87,3,87,635,8,87,1,88,1,88,3,88,639,8,88,1,88,4,88,
	642,8,88,11,88,12,88,643,1,89,1,89,3,89,648,8,89,1,89,4,89,651,8,89,11,
	89,12,89,652,1,90,1,90,1,90,1,90,3,90,659,8,90,1,90,1,90,1,90,1,90,3,90,
	665,8,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,678,
	8,91,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,4,93,690,8,93,11,
	93,12,93,691,1,93,1,93,1,94,1,94,1,95,1,95,1,96,1,96,1,97,1,97,1,97,1,97,
	1,97,1,97,1,97,1,98,1,98,1,98,1,98,5,98,713,8,98,10,98,12,98,716,9,98,1,
	98,1,98,1,98,3,98,721,8,98,1,98,1,98,1,99,4,99,726,8,99,11,99,12,99,727,
	1,99,1,99,1,100,1,100,1,100,1,100,1,101,1,101,1,101,3,101,739,8,101,1,101,
	5,101,742,8,101,10,101,12,101,745,9,101,1,101,1,101,3,526,543,714,0,102,
	1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
	15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
	27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
	39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
	51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,
	123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,
	72,145,73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,163,82,
	165,83,167,0,169,84,171,85,173,86,175,87,177,0,179,0,181,0,183,0,185,0,
	187,0,189,0,191,0,193,0,195,88,197,89,199,90,201,91,203,92,1,0,15,3,0,65,
	90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,34,34,92,92,2,0,39,39,
	92,92,2,0,88,88,120,120,2,0,69,69,101,101,2,0,43,43,45,45,2,0,80,80,112,
	112,11,0,34,36,39,39,92,92,97,98,102,102,110,110,114,114,116,116,118,118,
	122,122,124,124,1,0,48,50,1,0,48,57,3,0,48,57,65,70,97,102,4,0,10,10,13,
	13,133,133,8232,8233,3,0,9,9,12,13,32,32,1,0,10,10,781,0,1,1,0,0,0,0,3,
	1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
	15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
	0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
	37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
	0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,
	59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,
	0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,
	81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,
	0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,
	103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,
	1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,
	0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,
	0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,
	0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,
	0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,
	165,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,195,
	1,0,0,0,0,197,1,0,0,0,0,199,1,0,0,0,0,201,1,0,0,0,0,203,1,0,0,0,1,205,1,
	0,0,0,3,207,1,0,0,0,5,209,1,0,0,0,7,213,1,0,0,0,9,219,1,0,0,0,11,227,1,
	0,0,0,13,233,1,0,0,0,15,240,1,0,0,0,17,243,1,0,0,0,19,247,1,0,0,0,21,253,
	1,0,0,0,23,259,1,0,0,0,25,261,1,0,0,0,27,264,1,0,0,0,29,267,1,0,0,0,31,
	270,1,0,0,0,33,273,1,0,0,0,35,277,1,0,0,0,37,281,1,0,0,0,39,284,1,0,0,0,
	41,287,1,0,0,0,43,290,1,0,0,0,45,296,1,0,0,0,47,298,1,0,0,0,49,304,1,0,
	0,0,51,309,1,0,0,0,53,312,1,0,0,0,55,316,1,0,0,0,57,322,1,0,0,0,59,329,
	1,0,0,0,61,335,1,0,0,0,63,338,1,0,0,0,65,343,1,0,0,0,67,350,1,0,0,0,69,
	355,1,0,0,0,71,359,1,0,0,0,73,361,1,0,0,0,75,364,1,0,0,0,77,373,1,0,0,0,
	79,379,1,0,0,0,81,381,1,0,0,0,83,383,1,0,0,0,85,390,1,0,0,0,87,399,1,0,
	0,0,89,402,1,0,0,0,91,406,1,0,0,0,93,412,1,0,0,0,95,417,1,0,0,0,97,419,
	1,0,0,0,99,421,1,0,0,0,101,423,1,0,0,0,103,425,1,0,0,0,105,427,1,0,0,0,
	107,429,1,0,0,0,109,433,1,0,0,0,111,436,1,0,0,0,113,439,1,0,0,0,115,441,
	1,0,0,0,117,444,1,0,0,0,119,446,1,0,0,0,121,448,1,0,0,0,123,451,1,0,0,0,
	125,454,1,0,0,0,127,458,1,0,0,0,129,461,1,0,0,0,131,463,1,0,0,0,133,465,
	1,0,0,0,135,467,1,0,0,0,137,469,1,0,0,0,139,471,1,0,0,0,141,473,1,0,0,0,
	143,476,1,0,0,0,145,479,1,0,0,0,147,481,1,0,0,0,149,483,1,0,0,0,151,485,
	1,0,0,0,153,489,1,0,0,0,155,492,1,0,0,0,157,495,1,0,0,0,159,502,1,0,0,0,
	161,512,1,0,0,0,163,522,1,0,0,0,165,531,1,0,0,0,167,547,1,0,0,0,169,550,
	1,0,0,0,171,557,1,0,0,0,173,595,1,0,0,0,175,634,1,0,0,0,177,636,1,0,0,0,
	179,645,1,0,0,0,181,664,1,0,0,0,183,677,1,0,0,0,185,679,1,0,0,0,187,684,
	1,0,0,0,189,695,1,0,0,0,191,697,1,0,0,0,193,699,1,0,0,0,195,701,1,0,0,0,
	197,708,1,0,0,0,199,725,1,0,0,0,201,731,1,0,0,0,203,735,1,0,0,0,205,206,
	5,59,0,0,206,2,1,0,0,0,207,208,5,61,0,0,208,4,1,0,0,0,209,210,5,110,0,0,
	210,211,5,101,0,0,211,212,5,119,0,0,212,6,1,0,0,0,213,214,5,99,0,0,214,
	215,5,108,0,0,215,216,5,97,0,0,216,217,5,115,0,0,217,218,5,115,0,0,218,
	8,1,0,0,0,219,220,5,101,0,0,220,221,5,120,0,0,221,222,5,116,0,0,222,223,
	5,101,0,0,223,224,5,110,0,0,224,225,5,100,0,0,225,226,5,115,0,0,226,10,
	1,0,0,0,227,228,5,117,0,0,228,229,5,115,0,0,229,230,5,105,0,0,230,231,5,
	110,0,0,231,232,5,103,0,0,232,12,1,0,0,0,233,234,5,102,0,0,234,235,5,105,
	0,0,235,236,5,108,0,0,236,237,5,116,0,0,237,238,5,101,0,0,238,239,5,114,
	0,0,239,14,1,0,0,0,240,241,5,105,0,0,241,242,5,115,0,0,242,16,1,0,0,0,243,
	244,5,116,0,0,244,245,5,114,0,0,245,246,5,121,0,0,246,18,1,0,0,0,247,248,
	5,99,0,0,248,249,5,97,0,0,249,250,5,116,0,0,250,251,5,99,0,0,251,252,5,
	104,0,0,252,20,1,0,0,0,253,254,5,116,0,0,254,255,5,104,0,0,255,256,5,114,
	0,0,256,257,5,111,0,0,257,258,5,119,0,0,258,22,1,0,0,0,259,260,5,63,0,0,
	260,24,1,0,0,0,261,262,5,43,0,0,262,263,5,61,0,0,263,26,1,0,0,0,264,265,
	5,45,0,0,265,266,5,61,0,0,266,28,1,0,0,0,267,268,5,42,0,0,268,269,5,61,
	0,0,269,30,1,0,0,0,270,271,5,47,0,0,271,272,5,61,0,0,272,32,1,0,0,0,273,
	274,5,60,0,0,274,275,5,60,0,0,275,276,5,61,0,0,276,34,1,0,0,0,277,278,5,
	62,0,0,278,279,5,62,0,0,279,280,5,61,0,0,280,36,1,0,0,0,281,282,5,38,0,
	0,282,283,5,61,0,0,283,38,1,0,0,0,284,285,5,124,0,0,285,286,5,61,0,0,286,
	40,1,0,0,0,287,288,5,94,0,0,288,289,5,61,0,0,289,42,1,0,0,0,290,291,5,100,
	0,0,291,292,5,101,0,0,292,293,5,102,0,0,293,294,5,101,0,0,294,295,5,114,
	0,0,295,44,1,0,0,0,296,297,5,64,0,0,297,46,1,0,0,0,298,299,5,98,0,0,299,
	300,5,114,0,0,300,301,5,101,0,0,301,302,5,97,0,0,302,303,5,107,0,0,303,
	48,1,0,0,0,304,305,5,103,0,0,305,306,5,111,0,0,306,307,5,116,0,0,307,308,
	5,111,0,0,308,50,1,0,0,0,309,310,5,100,0,0,310,311,5,111,0,0,311,52,1,0,
	0,0,312,313,5,101,0,0,313,314,5,110,0,0,314,315,5,100,0,0,315,54,1,0,0,
	0,316,317,5,119,0,0,317,318,5,104,0,0,318,319,5,105,0,0,319,320,5,108,0,
	0,320,321,5,101,0,0,321,56,1,0,0,0,322,323,5,114,0,0,323,324,5,101,0,0,
	324,325,5,112,0,0,325,326,5,101,0,0,326,327,5,97,0,0,327,328,5,116,0,0,
	328,58,1,0,0,0,329,330,5,117,0,0,330,331,5,110,0,0,331,332,5,116,0,0,332,
	333,5,105,0,0,333,334,5,108,0,0,334,60,1,0,0,0,335,336,5,105,0,0,336,337,
	5,102,0,0,337,62,1,0,0,0,338,339,5,116,0,0,339,340,5,104,0,0,340,341,5,
	101,0,0,341,342,5,110,0,0,342,64,1,0,0,0,343,344,5,101,0,0,344,345,5,108,
	0,0,345,346,5,115,0,0,346,347,5,101,0,0,347,348,5,105,0,0,348,349,5,102,
	0,0,349,66,1,0,0,0,350,351,5,101,0,0,351,352,5,108,0,0,352,353,5,115,0,
	0,353,354,5,101,0,0,354,68,1,0,0,0,355,356,5,102,0,0,356,357,5,111,0,0,
	357,358,5,114,0,0,358,70,1,0,0,0,359,360,5,44,0,0,360,72,1,0,0,0,361,362,
	5,105,0,0,362,363,5,110,0,0,363,74,1,0,0,0,364,365,5,102,0,0,365,366,5,
	117,0,0,366,367,5,110,0,0,367,368,5,99,0,0,368,369,5,116,0,0,369,370,5,
	105,0,0,370,371,5,111,0,0,371,372,5,110,0,0,372,76,1,0,0,0,373,374,5,108,
	0,0,374,375,5,111,0,0,375,376,5,99,0,0,376,377,5,97,0,0,377,378,5,108,0,
	0,378,78,1,0,0,0,379,380,5,60,0,0,380,80,1,0,0,0,381,382,5,62,0,0,382,82,
	1,0,0,0,383,384,5,114,0,0,384,385,5,101,0,0,385,386,5,116,0,0,386,387,5,
	117,0,0,387,388,5,114,0,0,388,389,5,110,0,0,389,84,1,0,0,0,390,391,5,99,
	0,0,391,392,5,111,0,0,392,393,5,110,0,0,393,394,5,116,0,0,394,395,5,105,
	0,0,395,396,5,110,0,0,396,397,5,117,0,0,397,398,5,101,0,0,398,86,1,0,0,
	0,399,400,5,58,0,0,400,401,5,58,0,0,401,88,1,0,0,0,402,403,5,110,0,0,403,
	404,5,105,0,0,404,405,5,108,0,0,405,90,1,0,0,0,406,407,5,102,0,0,407,408,
	5,97,0,0,408,409,5,108,0,0,409,410,5,115,0,0,410,411,5,101,0,0,411,92,1,
	0,0,0,412,413,5,116,0,0,413,414,5,114,0,0,414,415,5,117,0,0,415,416,5,101,
	0,0,416,94,1,0,0,0,417,418,5,46,0,0,418,96,1,0,0,0,419,420,5,126,0,0,420,
	98,1,0,0,0,421,422,5,45,0,0,422,100,1,0,0,0,423,424,5,35,0,0,424,102,1,
	0,0,0,425,426,5,40,0,0,426,104,1,0,0,0,427,428,5,41,0,0,428,106,1,0,0,0,
	429,430,5,110,0,0,430,431,5,111,0,0,431,432,5,116,0,0,432,108,1,0,0,0,433,
	434,5,60,0,0,434,435,5,60,0,0,435,110,1,0,0,0,436,437,5,62,0,0,437,438,
	5,62,0,0,438,112,1,0,0,0,439,440,5,38,0,0,440,114,1,0,0,0,441,442,5,47,
	0,0,442,443,5,47,0,0,443,116,1,0,0,0,444,445,5,37,0,0,445,118,1,0,0,0,446,
	447,5,58,0,0,447,120,1,0,0,0,448,449,5,60,0,0,449,450,5,61,0,0,450,122,
	1,0,0,0,451,452,5,62,0,0,452,453,5,61,0,0,453,124,1,0,0,0,454,455,5,97,
	0,0,455,456,5,110,0,0,456,457,5,100,0,0,457,126,1,0,0,0,458,459,5,111,0,
	0,459,460,5,114,0,0,460,128,1,0,0,0,461,462,5,43,0,0,462,130,1,0,0,0,463,
	464,5,42,0,0,464,132,1,0,0,0,465,466,5,123,0,0,466,134,1,0,0,0,467,468,
	5,125,0,0,468,136,1,0,0,0,469,470,5,91,0,0,470,138,1,0,0,0,471,472,5,93,
	0,0,472,140,1,0,0,0,473,474,5,61,0,0,474,475,5,61,0,0,475,142,1,0,0,0,476,
	477,5,46,0,0,477,478,5,46,0,0,478,144,1,0,0,0,479,480,5,124,0,0,480,146,
	1,0,0,0,481,482,5,94,0,0,482,148,1,0,0,0,483,484,5,47,0,0,484,150,1,0,0,
	0,485,486,5,46,0,0,486,487,5,46,0,0,487,488,5,46,0,0,488,152,1,0,0,0,489,
	490,5,126,0,0,490,491,5,61,0,0,491,154,1,0,0,0,492,493,5,33,0,0,493,494,
	5,61,0,0,494,156,1,0,0,0,495,499,7,0,0,0,496,498,7,1,0,0,497,496,1,0,0,
	0,498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,158,1,0,0,0,501,499,
	1,0,0,0,502,507,5,34,0,0,503,506,3,181,90,0,504,506,8,2,0,0,505,503,1,0,
	0,0,505,504,1,0,0,0,506,509,1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,508,
	510,1,0,0,0,509,507,1,0,0,0,510,511,5,34,0,0,511,160,1,0,0,0,512,517,5,
	39,0,0,513,516,3,181,90,0,514,516,8,3,0,0,515,513,1,0,0,0,515,514,1,0,0,
	0,516,519,1,0,0,0,517,515,1,0,0,0,517,518,1,0,0,0,518,520,1,0,0,0,519,517,
	1,0,0,0,520,521,5,39,0,0,521,162,1,0,0,0,522,526,5,96,0,0,523,525,9,0,0,
	0,524,523,1,0,0,0,525,528,1,0,0,0,526,527,1,0,0,0,526,524,1,0,0,0,527,529,
	1,0,0,0,528,526,1,0,0,0,529,530,5,96,0,0,530,164,1,0,0,0,531,532,5,91,0,
	0,532,533,3,167,83,0,533,534,5,93,0,0,534,166,1,0,0,0,535,536,5,61,0,0,
	536,537,3,167,83,0,537,538,5,61,0,0,538,548,1,0,0,0,539,543,5,91,0,0,540,
	542,9,0,0,0,541,540,1,0,0,0,542,545,1,0,0,0,543,544,1,0,0,0,543,541,1,0,
	0,0,544,546,1,0,0,0,545,543,1,0,0,0,546,548,5,93,0,0,547,535,1,0,0,0,547,
	539,1,0,0,0,548,168,1,0,0,0,549,551,3,189,94,0,550,549,1,0,0,0,551,552,
	1,0,0,0,552,550,1,0,0,0,552,553,1,0,0,0,553,555,1,0,0,0,554,556,5,95,0,
	0,555,554,1,0,0,0,555,556,1,0,0,0,556,170,1,0,0,0,557,558,5,48,0,0,558,
	560,7,4,0,0,559,561,3,191,95,0,560,559,1,0,0,0,561,562,1,0,0,0,562,560,
	1,0,0,0,562,563,1,0,0,0,563,172,1,0,0,0,564,566,3,189,94,0,565,564,1,0,
	0,0,566,567,1,0,0,0,567,565,1,0,0,0,567,568,1,0,0,0,568,569,1,0,0,0,569,
	573,5,46,0,0,570,572,3,189,94,0,571,570,1,0,0,0,572,575,1,0,0,0,573,571,
	1,0,0,0,573,574,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,576,578,3,177,88,
	0,577,576,1,0,0,0,577,578,1,0,0,0,578,596,1,0,0,0,579,581,5,46,0,0,580,
	582,3,189,94,0,581,580,1,0,0,0,582,583,1,0,0,0,583,581,1,0,0,0,583,584,
	1,0,0,0,584,586,1,0,0,0,585,587,3,177,88,0,586,585,1,0,0,0,586,587,1,0,
	0,0,587,596,1,0,0,0,588,590,3,189,94,0,589,588,1,0,0,0,590,591,1,0,0,0,
	591,589,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,594,3,177,88,0,594,
	596,1,0,0,0,595,565,1,0,0,0,595,579,1,0,0,0,595,589,1,0,0,0,596,174,1,0,
	0,0,597,598,5,48,0,0,598,600,7,4,0,0,599,601,3,191,95,0,600,599,1,0,0,0,
	601,602,1,0,0,0,602,600,1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,604,608,
	5,46,0,0,605,607,3,191,95,0,606,605,1,0,0,0,607,610,1,0,0,0,608,606,1,0,
	0,0,608,609,1,0,0,0,609,612,1,0,0,0,610,608,1,0,0,0,611,613,3,179,89,0,
	612,611,1,0,0,0,612,613,1,0,0,0,613,635,1,0,0,0,614,615,5,48,0,0,615,616,
	7,4,0,0,616,618,5,46,0,0,617,619,3,191,95,0,618,617,1,0,0,0,619,620,1,0,
	0,0,620,618,1,0,0,0,620,621,1,0,0,0,621,623,1,0,0,0,622,624,3,179,89,0,
	623,622,1,0,0,0,623,624,1,0,0,0,624,635,1,0,0,0,625,626,5,48,0,0,626,628,
	7,4,0,0,627,629,3,191,95,0,628,627,1,0,0,0,629,630,1,0,0,0,630,628,1,0,
	0,0,630,631,1,0,0,0,631,632,1,0,0,0,632,633,3,179,89,0,633,635,1,0,0,0,
	634,597,1,0,0,0,634,614,1,0,0,0,634,625,1,0,0,0,635,176,1,0,0,0,636,638,
	7,5,0,0,637,639,7,6,0,0,638,637,1,0,0,0,638,639,1,0,0,0,639,641,1,0,0,0,
	640,642,3,189,94,0,641,640,1,0,0,0,642,643,1,0,0,0,643,641,1,0,0,0,643,
	644,1,0,0,0,644,178,1,0,0,0,645,647,7,7,0,0,646,648,7,6,0,0,647,646,1,0,
	0,0,647,648,1,0,0,0,648,650,1,0,0,0,649,651,3,189,94,0,650,649,1,0,0,0,
	651,652,1,0,0,0,652,650,1,0,0,0,652,653,1,0,0,0,653,180,1,0,0,0,654,655,
	5,92,0,0,655,665,7,8,0,0,656,658,5,92,0,0,657,659,5,13,0,0,658,657,1,0,
	0,0,658,659,1,0,0,0,659,660,1,0,0,0,660,665,5,10,0,0,661,665,3,183,91,0,
	662,665,3,185,92,0,663,665,3,187,93,0,664,654,1,0,0,0,664,656,1,0,0,0,664,
	661,1,0,0,0,664,662,1,0,0,0,664,663,1,0,0,0,665,182,1,0,0,0,666,667,5,92,
	0,0,667,678,3,189,94,0,668,669,5,92,0,0,669,670,3,189,94,0,670,671,3,189,
	94,0,671,678,1,0,0,0,672,673,5,92,0,0,673,674,7,9,0,0,674,675,3,189,94,
	0,675,676,3,189,94,0,676,678,1,0,0,0,677,666,1,0,0,0,677,668,1,0,0,0,677,
	672,1,0,0,0,678,184,1,0,0,0,679,680,5,92,0,0,680,681,5,120,0,0,681,682,
	3,191,95,0,682,683,3,191,95,0,683,186,1,0,0,0,684,685,5,92,0,0,685,686,
	5,117,0,0,686,687,5,123,0,0,687,689,1,0,0,0,688,690,3,191,95,0,689,688,
	1,0,0,0,690,691,1,0,0,0,691,689,1,0,0,0,691,692,1,0,0,0,692,693,1,0,0,0,
	693,694,5,125,0,0,694,188,1,0,0,0,695,696,7,10,0,0,696,190,1,0,0,0,697,
	698,7,11,0,0,698,192,1,0,0,0,699,700,8,12,0,0,700,194,1,0,0,0,701,702,5,
	45,0,0,702,703,5,45,0,0,703,704,1,0,0,0,704,705,6,97,0,0,705,706,1,0,0,
	0,706,707,6,97,1,0,707,196,1,0,0,0,708,709,5,47,0,0,709,710,5,42,0,0,710,
	714,1,0,0,0,711,713,9,0,0,0,712,711,1,0,0,0,713,716,1,0,0,0,714,715,1,0,
	0,0,714,712,1,0,0,0,715,720,1,0,0,0,716,714,1,0,0,0,717,718,5,42,0,0,718,
	721,5,47,0,0,719,721,5,0,0,1,720,717,1,0,0,0,720,719,1,0,0,0,721,722,1,
	0,0,0,722,723,6,98,2,0,723,198,1,0,0,0,724,726,7,13,0,0,725,724,1,0,0,0,
	726,727,1,0,0,0,727,725,1,0,0,0,727,728,1,0,0,0,728,729,1,0,0,0,729,730,
	6,99,1,0,730,200,1,0,0,0,731,732,7,14,0,0,732,733,1,0,0,0,733,734,6,100,
	3,0,734,202,1,0,0,0,735,736,5,35,0,0,736,738,4,101,0,0,737,739,5,33,0,0,
	738,737,1,0,0,0,738,739,1,0,0,0,739,743,1,0,0,0,740,742,3,193,96,0,741,
	740,1,0,0,0,742,745,1,0,0,0,743,741,1,0,0,0,743,744,1,0,0,0,744,746,1,0,
	0,0,745,743,1,0,0,0,746,747,6,101,1,0,747,204,1,0,0,0,39,0,499,505,507,
	515,517,526,543,547,552,555,562,567,573,577,583,586,591,595,602,608,612,
	620,623,630,634,638,643,647,652,658,664,677,691,714,720,727,738,743,4,1,
	97,0,0,1,0,6,0,0,0,2,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!LuaLexer.__ATN) {
			LuaLexer.__ATN = new ATNDeserializer().deserialize(LuaLexer._serializedATN);
		}

		return LuaLexer.__ATN;
	}


	static DecisionsToDFA = LuaLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}