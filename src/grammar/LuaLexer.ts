// Generated from grammar/leap/LuaLexer.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
import LuaLexerBase from './LuaLexerBase.js';

export default class LuaLexer extends LuaLexerBase {
	public static readonly SEMI = 1;
	public static readonly EQ = 2;
	public static readonly NEW = 3;
	public static readonly CLASS = 4;
	public static readonly EXTENDS = 5;
	public static readonly TRY = 6;
	public static readonly CATCH = 7;
	public static readonly THROW = 8;
	public static readonly QUESTMARK = 9;
	public static readonly COMPPLUS = 10;
	public static readonly COMPMINUS = 11;
	public static readonly COMPSTAR = 12;
	public static readonly COMPSLASH = 13;
	public static readonly COMPLL = 14;
	public static readonly COMPGG = 15;
	public static readonly COMPAMP = 16;
	public static readonly COMPPIPE = 17;
	public static readonly COMPCARET = 18;
	public static readonly DEFER = 19;
	public static readonly AT = 20;
	public static readonly BREAK = 21;
	public static readonly GOTO = 22;
	public static readonly DO = 23;
	public static readonly END = 24;
	public static readonly WHILE = 25;
	public static readonly REPEAT = 26;
	public static readonly UNTIL = 27;
	public static readonly IF = 28;
	public static readonly THEN = 29;
	public static readonly ELSEIF = 30;
	public static readonly ELSE = 31;
	public static readonly FOR = 32;
	public static readonly COMMA = 33;
	public static readonly IN = 34;
	public static readonly FUNCTION = 35;
	public static readonly LOCAL = 36;
	public static readonly LT = 37;
	public static readonly GT = 38;
	public static readonly RETURN = 39;
	public static readonly CONTINUE = 40;
	public static readonly CC = 41;
	public static readonly NIL = 42;
	public static readonly FALSE = 43;
	public static readonly TRUE = 44;
	public static readonly DOT = 45;
	public static readonly SQUIG = 46;
	public static readonly MINUS = 47;
	public static readonly POUND = 48;
	public static readonly OP = 49;
	public static readonly CP = 50;
	public static readonly NOT = 51;
	public static readonly LL = 52;
	public static readonly GG = 53;
	public static readonly AMP = 54;
	public static readonly SS = 55;
	public static readonly PER = 56;
	public static readonly COL = 57;
	public static readonly LE = 58;
	public static readonly GE = 59;
	public static readonly AND = 60;
	public static readonly OR = 61;
	public static readonly PLUS = 62;
	public static readonly STAR = 63;
	public static readonly OCU = 64;
	public static readonly CCU = 65;
	public static readonly OB = 66;
	public static readonly CB = 67;
	public static readonly EE = 68;
	public static readonly DD = 69;
	public static readonly PIPE = 70;
	public static readonly CARET = 71;
	public static readonly SLASH = 72;
	public static readonly DDD = 73;
	public static readonly SQEQ = 74;
	public static readonly NOTEQ_ALT = 75;
	public static readonly NAME = 76;
	public static readonly NORMALSTRING = 77;
	public static readonly CHARSTRING = 78;
	public static readonly JENKINSHASHSTRING = 79;
	public static readonly LONGSTRING = 80;
	public static readonly INT = 81;
	public static readonly HEX = 82;
	public static readonly FLOAT = 83;
	public static readonly HEX_FLOAT = 84;
	public static readonly COMMENT = 85;
	public static readonly C_COMMENT = 86;
	public static readonly WS = 87;
	public static readonly NL = 88;
	public static readonly SHEBANG = 89;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "';'", 
                                                            "'='", "'new'", 
                                                            "'class'", "'extends'", 
                                                            "'try'", "'catch'", 
                                                            "'throw'", "'?'", 
                                                            "'+='", "'-='", 
                                                            "'*='", "'/='", 
                                                            "'<<='", "'>>='", 
                                                            "'&='", "'|='", 
                                                            "'^='", "'defer'", 
                                                            "'@'", "'break'", 
                                                            "'goto'", "'do'", 
                                                            "'end'", "'while'", 
                                                            "'repeat'", 
                                                            "'until'", "'if'", 
                                                            "'then'", "'elseif'", 
                                                            "'else'", "'for'", 
                                                            "','", "'in'", 
                                                            "'function'", 
                                                            "'local'", "'<'", 
                                                            "'>'", "'return'", 
                                                            "'continue'", 
                                                            "'::'", "'nil'", 
                                                            "'false'", "'true'", 
                                                            "'.'", "'~'", 
                                                            "'-'", "'#'", 
                                                            "'('", "')'", 
                                                            "'not'", "'<<'", 
                                                            "'>>'", "'&'", 
                                                            "'//'", "'%'", 
                                                            "':'", "'<='", 
                                                            "'>='", "'and'", 
                                                            "'or'", "'+'", 
                                                            "'*'", "'{'", 
                                                            "'}'", "'['", 
                                                            "']'", "'=='", 
                                                            "'..'", "'|'", 
                                                            "'^'", "'/'", 
                                                            "'...'", "'~='", 
                                                            "'!='" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "SEMI", 
                                                             "EQ", "NEW", 
                                                             "CLASS", "EXTENDS", 
                                                             "TRY", "CATCH", 
                                                             "THROW", "QUESTMARK", 
                                                             "COMPPLUS", 
                                                             "COMPMINUS", 
                                                             "COMPSTAR", 
                                                             "COMPSLASH", 
                                                             "COMPLL", "COMPGG", 
                                                             "COMPAMP", 
                                                             "COMPPIPE", 
                                                             "COMPCARET", 
                                                             "DEFER", "AT", 
                                                             "BREAK", "GOTO", 
                                                             "DO", "END", 
                                                             "WHILE", "REPEAT", 
                                                             "UNTIL", "IF", 
                                                             "THEN", "ELSEIF", 
                                                             "ELSE", "FOR", 
                                                             "COMMA", "IN", 
                                                             "FUNCTION", 
                                                             "LOCAL", "LT", 
                                                             "GT", "RETURN", 
                                                             "CONTINUE", 
                                                             "CC", "NIL", 
                                                             "FALSE", "TRUE", 
                                                             "DOT", "SQUIG", 
                                                             "MINUS", "POUND", 
                                                             "OP", "CP", 
                                                             "NOT", "LL", 
                                                             "GG", "AMP", 
                                                             "SS", "PER", 
                                                             "COL", "LE", 
                                                             "GE", "AND", 
                                                             "OR", "PLUS", 
                                                             "STAR", "OCU", 
                                                             "CCU", "OB", 
                                                             "CB", "EE", 
                                                             "DD", "PIPE", 
                                                             "CARET", "SLASH", 
                                                             "DDD", "SQEQ", 
                                                             "NOTEQ_ALT", 
                                                             "NAME", "NORMALSTRING", 
                                                             "CHARSTRING", 
                                                             "JENKINSHASHSTRING", 
                                                             "LONGSTRING", 
                                                             "INT", "HEX", 
                                                             "FLOAT", "HEX_FLOAT", 
                                                             "COMMENT", 
                                                             "C_COMMENT", 
                                                             "WS", "NL", 
                                                             "SHEBANG" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"SEMI", "EQ", "NEW", "CLASS", "EXTENDS", "TRY", "CATCH", "THROW", "QUESTMARK", 
		"COMPPLUS", "COMPMINUS", "COMPSTAR", "COMPSLASH", "COMPLL", "COMPGG", 
		"COMPAMP", "COMPPIPE", "COMPCARET", "DEFER", "AT", "BREAK", "GOTO", "DO", 
		"END", "WHILE", "REPEAT", "UNTIL", "IF", "THEN", "ELSEIF", "ELSE", "FOR", 
		"COMMA", "IN", "FUNCTION", "LOCAL", "LT", "GT", "RETURN", "CONTINUE", 
		"CC", "NIL", "FALSE", "TRUE", "DOT", "SQUIG", "MINUS", "POUND", "OP", 
		"CP", "NOT", "LL", "GG", "AMP", "SS", "PER", "COL", "LE", "GE", "AND", 
		"OR", "PLUS", "STAR", "OCU", "CCU", "OB", "CB", "EE", "DD", "PIPE", "CARET", 
		"SLASH", "DDD", "SQEQ", "NOTEQ_ALT", "NAME", "NORMALSTRING", "CHARSTRING", 
		"JENKINSHASHSTRING", "LONGSTRING", "NESTED_STR", "INT", "HEX", "FLOAT", 
		"HEX_FLOAT", "ExponentPart", "HexExponentPart", "EscapeSequence", "DecimalEscape", 
		"HexEscape", "UtfEscape", "Digit", "HexDigit", "SingleLineInputCharacter", 
		"COMMENT", "C_COMMENT", "WS", "NL", "SHEBANG",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, LuaLexer._ATN, LuaLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "LuaLexer.g4"; }

	public get literalNames(): (string | null)[] { return LuaLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return LuaLexer.symbolicNames; }
	public get ruleNames(): string[] { return LuaLexer.ruleNames; }

	public get serializedATN(): number[] { return LuaLexer._serializedATN; }

	public get channelNames(): string[] { return LuaLexer.channelNames; }

	public get modeNames(): string[] { return LuaLexer.modeNames; }

	// @Override
	public action(localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 94:
			this.COMMENT_action(localctx, actionIndex);
			break;
		}
	}
	private COMMENT_action(localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			 this.HandleComment(); 
			break;
		}
	}
	// @Override
	public sempred(localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 98:
			return this.SHEBANG_sempred(localctx, predIndex);
		}
		return true;
	}
	private SHEBANG_sempred(localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return  this.IsLine1Col0() ;
		}
		return true;
	}

	public static readonly _serializedATN: number[] = [4,0,89,726,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
	45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
	2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,
	60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,
	7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,
	74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,
	2,82,7,82,2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,
	89,7,89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,
	7,96,2,97,7,97,2,98,7,98,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
	3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
	6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,
	11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,
	1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,
	19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,
	1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
	25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,
	1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,
	30,1,31,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,
	1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,
	38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
	1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,
	43,1,43,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,
	1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,
	54,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,
	1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,
	65,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,
	1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,74,1,74,1,74,1,75,1,75,5,75,476,8,
	75,10,75,12,75,479,9,75,1,76,1,76,1,76,5,76,484,8,76,10,76,12,76,487,9,
	76,1,76,1,76,1,77,1,77,1,77,5,77,494,8,77,10,77,12,77,497,9,77,1,77,1,77,
	1,78,1,78,5,78,503,8,78,10,78,12,78,506,9,78,1,78,1,78,1,79,1,79,1,79,1,
	79,1,80,1,80,1,80,1,80,1,80,1,80,5,80,520,8,80,10,80,12,80,523,9,80,1,80,
	3,80,526,8,80,1,81,4,81,529,8,81,11,81,12,81,530,1,81,3,81,534,8,81,1,82,
	1,82,1,82,4,82,539,8,82,11,82,12,82,540,1,83,4,83,544,8,83,11,83,12,83,
	545,1,83,1,83,5,83,550,8,83,10,83,12,83,553,9,83,1,83,3,83,556,8,83,1,83,
	1,83,4,83,560,8,83,11,83,12,83,561,1,83,3,83,565,8,83,1,83,4,83,568,8,83,
	11,83,12,83,569,1,83,1,83,3,83,574,8,83,1,84,1,84,1,84,4,84,579,8,84,11,
	84,12,84,580,1,84,1,84,5,84,585,8,84,10,84,12,84,588,9,84,1,84,3,84,591,
	8,84,1,84,1,84,1,84,1,84,4,84,597,8,84,11,84,12,84,598,1,84,3,84,602,8,
	84,1,84,1,84,1,84,4,84,607,8,84,11,84,12,84,608,1,84,1,84,3,84,613,8,84,
	1,85,1,85,3,85,617,8,85,1,85,4,85,620,8,85,11,85,12,85,621,1,86,1,86,3,
	86,626,8,86,1,86,4,86,629,8,86,11,86,12,86,630,1,87,1,87,1,87,1,87,3,87,
	637,8,87,1,87,1,87,1,87,1,87,3,87,643,8,87,1,88,1,88,1,88,1,88,1,88,1,88,
	1,88,1,88,1,88,1,88,1,88,3,88,656,8,88,1,89,1,89,1,89,1,89,1,89,1,90,1,
	90,1,90,1,90,1,90,4,90,668,8,90,11,90,12,90,669,1,90,1,90,1,91,1,91,1,92,
	1,92,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,5,
	95,691,8,95,10,95,12,95,694,9,95,1,95,1,95,1,95,3,95,699,8,95,1,95,1,95,
	1,96,4,96,704,8,96,11,96,12,96,705,1,96,1,96,1,97,1,97,1,97,1,97,1,98,1,
	98,1,98,3,98,717,8,98,1,98,5,98,720,8,98,10,98,12,98,723,9,98,1,98,1,98,
	3,504,521,692,0,99,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
	23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
	47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
	71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
	95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,
	58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,
	137,69,139,70,141,71,143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,
	79,159,80,161,0,163,81,165,82,167,83,169,84,171,0,173,0,175,0,177,0,179,
	0,181,0,183,0,185,0,187,0,189,85,191,86,193,87,195,88,197,89,1,0,15,3,0,
	65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,34,34,92,92,2,0,39,
	39,92,92,2,0,88,88,120,120,2,0,69,69,101,101,2,0,43,43,45,45,2,0,80,80,
	112,112,11,0,34,36,39,39,92,92,97,98,102,102,110,110,114,114,116,116,118,
	118,122,122,124,124,1,0,48,50,1,0,48,57,3,0,48,57,65,70,97,102,4,0,10,10,
	13,13,133,133,8232,8233,3,0,9,9,12,13,32,32,1,0,10,10,759,0,1,1,0,0,0,0,
	3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
	0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
	0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
	0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
	0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
	0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
	0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
	0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,
	0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,
	0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,
	113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,
	1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,
	0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,
	0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,
	0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,
	0,167,1,0,0,0,0,169,1,0,0,0,0,189,1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,0,0,
	195,1,0,0,0,0,197,1,0,0,0,1,199,1,0,0,0,3,201,1,0,0,0,5,203,1,0,0,0,7,207,
	1,0,0,0,9,213,1,0,0,0,11,221,1,0,0,0,13,225,1,0,0,0,15,231,1,0,0,0,17,237,
	1,0,0,0,19,239,1,0,0,0,21,242,1,0,0,0,23,245,1,0,0,0,25,248,1,0,0,0,27,
	251,1,0,0,0,29,255,1,0,0,0,31,259,1,0,0,0,33,262,1,0,0,0,35,265,1,0,0,0,
	37,268,1,0,0,0,39,274,1,0,0,0,41,276,1,0,0,0,43,282,1,0,0,0,45,287,1,0,
	0,0,47,290,1,0,0,0,49,294,1,0,0,0,51,300,1,0,0,0,53,307,1,0,0,0,55,313,
	1,0,0,0,57,316,1,0,0,0,59,321,1,0,0,0,61,328,1,0,0,0,63,333,1,0,0,0,65,
	337,1,0,0,0,67,339,1,0,0,0,69,342,1,0,0,0,71,351,1,0,0,0,73,357,1,0,0,0,
	75,359,1,0,0,0,77,361,1,0,0,0,79,368,1,0,0,0,81,377,1,0,0,0,83,380,1,0,
	0,0,85,384,1,0,0,0,87,390,1,0,0,0,89,395,1,0,0,0,91,397,1,0,0,0,93,399,
	1,0,0,0,95,401,1,0,0,0,97,403,1,0,0,0,99,405,1,0,0,0,101,407,1,0,0,0,103,
	411,1,0,0,0,105,414,1,0,0,0,107,417,1,0,0,0,109,419,1,0,0,0,111,422,1,0,
	0,0,113,424,1,0,0,0,115,426,1,0,0,0,117,429,1,0,0,0,119,432,1,0,0,0,121,
	436,1,0,0,0,123,439,1,0,0,0,125,441,1,0,0,0,127,443,1,0,0,0,129,445,1,0,
	0,0,131,447,1,0,0,0,133,449,1,0,0,0,135,451,1,0,0,0,137,454,1,0,0,0,139,
	457,1,0,0,0,141,459,1,0,0,0,143,461,1,0,0,0,145,463,1,0,0,0,147,467,1,0,
	0,0,149,470,1,0,0,0,151,473,1,0,0,0,153,480,1,0,0,0,155,490,1,0,0,0,157,
	500,1,0,0,0,159,509,1,0,0,0,161,525,1,0,0,0,163,528,1,0,0,0,165,535,1,0,
	0,0,167,573,1,0,0,0,169,612,1,0,0,0,171,614,1,0,0,0,173,623,1,0,0,0,175,
	642,1,0,0,0,177,655,1,0,0,0,179,657,1,0,0,0,181,662,1,0,0,0,183,673,1,0,
	0,0,185,675,1,0,0,0,187,677,1,0,0,0,189,679,1,0,0,0,191,686,1,0,0,0,193,
	703,1,0,0,0,195,709,1,0,0,0,197,713,1,0,0,0,199,200,5,59,0,0,200,2,1,0,
	0,0,201,202,5,61,0,0,202,4,1,0,0,0,203,204,5,110,0,0,204,205,5,101,0,0,
	205,206,5,119,0,0,206,6,1,0,0,0,207,208,5,99,0,0,208,209,5,108,0,0,209,
	210,5,97,0,0,210,211,5,115,0,0,211,212,5,115,0,0,212,8,1,0,0,0,213,214,
	5,101,0,0,214,215,5,120,0,0,215,216,5,116,0,0,216,217,5,101,0,0,217,218,
	5,110,0,0,218,219,5,100,0,0,219,220,5,115,0,0,220,10,1,0,0,0,221,222,5,
	116,0,0,222,223,5,114,0,0,223,224,5,121,0,0,224,12,1,0,0,0,225,226,5,99,
	0,0,226,227,5,97,0,0,227,228,5,116,0,0,228,229,5,99,0,0,229,230,5,104,0,
	0,230,14,1,0,0,0,231,232,5,116,0,0,232,233,5,104,0,0,233,234,5,114,0,0,
	234,235,5,111,0,0,235,236,5,119,0,0,236,16,1,0,0,0,237,238,5,63,0,0,238,
	18,1,0,0,0,239,240,5,43,0,0,240,241,5,61,0,0,241,20,1,0,0,0,242,243,5,45,
	0,0,243,244,5,61,0,0,244,22,1,0,0,0,245,246,5,42,0,0,246,247,5,61,0,0,247,
	24,1,0,0,0,248,249,5,47,0,0,249,250,5,61,0,0,250,26,1,0,0,0,251,252,5,60,
	0,0,252,253,5,60,0,0,253,254,5,61,0,0,254,28,1,0,0,0,255,256,5,62,0,0,256,
	257,5,62,0,0,257,258,5,61,0,0,258,30,1,0,0,0,259,260,5,38,0,0,260,261,5,
	61,0,0,261,32,1,0,0,0,262,263,5,124,0,0,263,264,5,61,0,0,264,34,1,0,0,0,
	265,266,5,94,0,0,266,267,5,61,0,0,267,36,1,0,0,0,268,269,5,100,0,0,269,
	270,5,101,0,0,270,271,5,102,0,0,271,272,5,101,0,0,272,273,5,114,0,0,273,
	38,1,0,0,0,274,275,5,64,0,0,275,40,1,0,0,0,276,277,5,98,0,0,277,278,5,114,
	0,0,278,279,5,101,0,0,279,280,5,97,0,0,280,281,5,107,0,0,281,42,1,0,0,0,
	282,283,5,103,0,0,283,284,5,111,0,0,284,285,5,116,0,0,285,286,5,111,0,0,
	286,44,1,0,0,0,287,288,5,100,0,0,288,289,5,111,0,0,289,46,1,0,0,0,290,291,
	5,101,0,0,291,292,5,110,0,0,292,293,5,100,0,0,293,48,1,0,0,0,294,295,5,
	119,0,0,295,296,5,104,0,0,296,297,5,105,0,0,297,298,5,108,0,0,298,299,5,
	101,0,0,299,50,1,0,0,0,300,301,5,114,0,0,301,302,5,101,0,0,302,303,5,112,
	0,0,303,304,5,101,0,0,304,305,5,97,0,0,305,306,5,116,0,0,306,52,1,0,0,0,
	307,308,5,117,0,0,308,309,5,110,0,0,309,310,5,116,0,0,310,311,5,105,0,0,
	311,312,5,108,0,0,312,54,1,0,0,0,313,314,5,105,0,0,314,315,5,102,0,0,315,
	56,1,0,0,0,316,317,5,116,0,0,317,318,5,104,0,0,318,319,5,101,0,0,319,320,
	5,110,0,0,320,58,1,0,0,0,321,322,5,101,0,0,322,323,5,108,0,0,323,324,5,
	115,0,0,324,325,5,101,0,0,325,326,5,105,0,0,326,327,5,102,0,0,327,60,1,
	0,0,0,328,329,5,101,0,0,329,330,5,108,0,0,330,331,5,115,0,0,331,332,5,101,
	0,0,332,62,1,0,0,0,333,334,5,102,0,0,334,335,5,111,0,0,335,336,5,114,0,
	0,336,64,1,0,0,0,337,338,5,44,0,0,338,66,1,0,0,0,339,340,5,105,0,0,340,
	341,5,110,0,0,341,68,1,0,0,0,342,343,5,102,0,0,343,344,5,117,0,0,344,345,
	5,110,0,0,345,346,5,99,0,0,346,347,5,116,0,0,347,348,5,105,0,0,348,349,
	5,111,0,0,349,350,5,110,0,0,350,70,1,0,0,0,351,352,5,108,0,0,352,353,5,
	111,0,0,353,354,5,99,0,0,354,355,5,97,0,0,355,356,5,108,0,0,356,72,1,0,
	0,0,357,358,5,60,0,0,358,74,1,0,0,0,359,360,5,62,0,0,360,76,1,0,0,0,361,
	362,5,114,0,0,362,363,5,101,0,0,363,364,5,116,0,0,364,365,5,117,0,0,365,
	366,5,114,0,0,366,367,5,110,0,0,367,78,1,0,0,0,368,369,5,99,0,0,369,370,
	5,111,0,0,370,371,5,110,0,0,371,372,5,116,0,0,372,373,5,105,0,0,373,374,
	5,110,0,0,374,375,5,117,0,0,375,376,5,101,0,0,376,80,1,0,0,0,377,378,5,
	58,0,0,378,379,5,58,0,0,379,82,1,0,0,0,380,381,5,110,0,0,381,382,5,105,
	0,0,382,383,5,108,0,0,383,84,1,0,0,0,384,385,5,102,0,0,385,386,5,97,0,0,
	386,387,5,108,0,0,387,388,5,115,0,0,388,389,5,101,0,0,389,86,1,0,0,0,390,
	391,5,116,0,0,391,392,5,114,0,0,392,393,5,117,0,0,393,394,5,101,0,0,394,
	88,1,0,0,0,395,396,5,46,0,0,396,90,1,0,0,0,397,398,5,126,0,0,398,92,1,0,
	0,0,399,400,5,45,0,0,400,94,1,0,0,0,401,402,5,35,0,0,402,96,1,0,0,0,403,
	404,5,40,0,0,404,98,1,0,0,0,405,406,5,41,0,0,406,100,1,0,0,0,407,408,5,
	110,0,0,408,409,5,111,0,0,409,410,5,116,0,0,410,102,1,0,0,0,411,412,5,60,
	0,0,412,413,5,60,0,0,413,104,1,0,0,0,414,415,5,62,0,0,415,416,5,62,0,0,
	416,106,1,0,0,0,417,418,5,38,0,0,418,108,1,0,0,0,419,420,5,47,0,0,420,421,
	5,47,0,0,421,110,1,0,0,0,422,423,5,37,0,0,423,112,1,0,0,0,424,425,5,58,
	0,0,425,114,1,0,0,0,426,427,5,60,0,0,427,428,5,61,0,0,428,116,1,0,0,0,429,
	430,5,62,0,0,430,431,5,61,0,0,431,118,1,0,0,0,432,433,5,97,0,0,433,434,
	5,110,0,0,434,435,5,100,0,0,435,120,1,0,0,0,436,437,5,111,0,0,437,438,5,
	114,0,0,438,122,1,0,0,0,439,440,5,43,0,0,440,124,1,0,0,0,441,442,5,42,0,
	0,442,126,1,0,0,0,443,444,5,123,0,0,444,128,1,0,0,0,445,446,5,125,0,0,446,
	130,1,0,0,0,447,448,5,91,0,0,448,132,1,0,0,0,449,450,5,93,0,0,450,134,1,
	0,0,0,451,452,5,61,0,0,452,453,5,61,0,0,453,136,1,0,0,0,454,455,5,46,0,
	0,455,456,5,46,0,0,456,138,1,0,0,0,457,458,5,124,0,0,458,140,1,0,0,0,459,
	460,5,94,0,0,460,142,1,0,0,0,461,462,5,47,0,0,462,144,1,0,0,0,463,464,5,
	46,0,0,464,465,5,46,0,0,465,466,5,46,0,0,466,146,1,0,0,0,467,468,5,126,
	0,0,468,469,5,61,0,0,469,148,1,0,0,0,470,471,5,33,0,0,471,472,5,61,0,0,
	472,150,1,0,0,0,473,477,7,0,0,0,474,476,7,1,0,0,475,474,1,0,0,0,476,479,
	1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,478,152,1,0,0,0,479,477,1,0,0,0,
	480,485,5,34,0,0,481,484,3,175,87,0,482,484,8,2,0,0,483,481,1,0,0,0,483,
	482,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,488,1,0,
	0,0,487,485,1,0,0,0,488,489,5,34,0,0,489,154,1,0,0,0,490,495,5,39,0,0,491,
	494,3,175,87,0,492,494,8,3,0,0,493,491,1,0,0,0,493,492,1,0,0,0,494,497,
	1,0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,496,498,1,0,0,0,497,495,1,0,0,0,
	498,499,5,39,0,0,499,156,1,0,0,0,500,504,5,96,0,0,501,503,9,0,0,0,502,501,
	1,0,0,0,503,506,1,0,0,0,504,505,1,0,0,0,504,502,1,0,0,0,505,507,1,0,0,0,
	506,504,1,0,0,0,507,508,5,96,0,0,508,158,1,0,0,0,509,510,5,91,0,0,510,511,
	3,161,80,0,511,512,5,93,0,0,512,160,1,0,0,0,513,514,5,61,0,0,514,515,3,
	161,80,0,515,516,5,61,0,0,516,526,1,0,0,0,517,521,5,91,0,0,518,520,9,0,
	0,0,519,518,1,0,0,0,520,523,1,0,0,0,521,522,1,0,0,0,521,519,1,0,0,0,522,
	524,1,0,0,0,523,521,1,0,0,0,524,526,5,93,0,0,525,513,1,0,0,0,525,517,1,
	0,0,0,526,162,1,0,0,0,527,529,3,183,91,0,528,527,1,0,0,0,529,530,1,0,0,
	0,530,528,1,0,0,0,530,531,1,0,0,0,531,533,1,0,0,0,532,534,5,95,0,0,533,
	532,1,0,0,0,533,534,1,0,0,0,534,164,1,0,0,0,535,536,5,48,0,0,536,538,7,
	4,0,0,537,539,3,185,92,0,538,537,1,0,0,0,539,540,1,0,0,0,540,538,1,0,0,
	0,540,541,1,0,0,0,541,166,1,0,0,0,542,544,3,183,91,0,543,542,1,0,0,0,544,
	545,1,0,0,0,545,543,1,0,0,0,545,546,1,0,0,0,546,547,1,0,0,0,547,551,5,46,
	0,0,548,550,3,183,91,0,549,548,1,0,0,0,550,553,1,0,0,0,551,549,1,0,0,0,
	551,552,1,0,0,0,552,555,1,0,0,0,553,551,1,0,0,0,554,556,3,171,85,0,555,
	554,1,0,0,0,555,556,1,0,0,0,556,574,1,0,0,0,557,559,5,46,0,0,558,560,3,
	183,91,0,559,558,1,0,0,0,560,561,1,0,0,0,561,559,1,0,0,0,561,562,1,0,0,
	0,562,564,1,0,0,0,563,565,3,171,85,0,564,563,1,0,0,0,564,565,1,0,0,0,565,
	574,1,0,0,0,566,568,3,183,91,0,567,566,1,0,0,0,568,569,1,0,0,0,569,567,
	1,0,0,0,569,570,1,0,0,0,570,571,1,0,0,0,571,572,3,171,85,0,572,574,1,0,
	0,0,573,543,1,0,0,0,573,557,1,0,0,0,573,567,1,0,0,0,574,168,1,0,0,0,575,
	576,5,48,0,0,576,578,7,4,0,0,577,579,3,185,92,0,578,577,1,0,0,0,579,580,
	1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,582,1,0,0,0,582,586,5,46,0,
	0,583,585,3,185,92,0,584,583,1,0,0,0,585,588,1,0,0,0,586,584,1,0,0,0,586,
	587,1,0,0,0,587,590,1,0,0,0,588,586,1,0,0,0,589,591,3,173,86,0,590,589,
	1,0,0,0,590,591,1,0,0,0,591,613,1,0,0,0,592,593,5,48,0,0,593,594,7,4,0,
	0,594,596,5,46,0,0,595,597,3,185,92,0,596,595,1,0,0,0,597,598,1,0,0,0,598,
	596,1,0,0,0,598,599,1,0,0,0,599,601,1,0,0,0,600,602,3,173,86,0,601,600,
	1,0,0,0,601,602,1,0,0,0,602,613,1,0,0,0,603,604,5,48,0,0,604,606,7,4,0,
	0,605,607,3,185,92,0,606,605,1,0,0,0,607,608,1,0,0,0,608,606,1,0,0,0,608,
	609,1,0,0,0,609,610,1,0,0,0,610,611,3,173,86,0,611,613,1,0,0,0,612,575,
	1,0,0,0,612,592,1,0,0,0,612,603,1,0,0,0,613,170,1,0,0,0,614,616,7,5,0,0,
	615,617,7,6,0,0,616,615,1,0,0,0,616,617,1,0,0,0,617,619,1,0,0,0,618,620,
	3,183,91,0,619,618,1,0,0,0,620,621,1,0,0,0,621,619,1,0,0,0,621,622,1,0,
	0,0,622,172,1,0,0,0,623,625,7,7,0,0,624,626,7,6,0,0,625,624,1,0,0,0,625,
	626,1,0,0,0,626,628,1,0,0,0,627,629,3,183,91,0,628,627,1,0,0,0,629,630,
	1,0,0,0,630,628,1,0,0,0,630,631,1,0,0,0,631,174,1,0,0,0,632,633,5,92,0,
	0,633,643,7,8,0,0,634,636,5,92,0,0,635,637,5,13,0,0,636,635,1,0,0,0,636,
	637,1,0,0,0,637,638,1,0,0,0,638,643,5,10,0,0,639,643,3,177,88,0,640,643,
	3,179,89,0,641,643,3,181,90,0,642,632,1,0,0,0,642,634,1,0,0,0,642,639,1,
	0,0,0,642,640,1,0,0,0,642,641,1,0,0,0,643,176,1,0,0,0,644,645,5,92,0,0,
	645,656,3,183,91,0,646,647,5,92,0,0,647,648,3,183,91,0,648,649,3,183,91,
	0,649,656,1,0,0,0,650,651,5,92,0,0,651,652,7,9,0,0,652,653,3,183,91,0,653,
	654,3,183,91,0,654,656,1,0,0,0,655,644,1,0,0,0,655,646,1,0,0,0,655,650,
	1,0,0,0,656,178,1,0,0,0,657,658,5,92,0,0,658,659,5,120,0,0,659,660,3,185,
	92,0,660,661,3,185,92,0,661,180,1,0,0,0,662,663,5,92,0,0,663,664,5,117,
	0,0,664,665,5,123,0,0,665,667,1,0,0,0,666,668,3,185,92,0,667,666,1,0,0,
	0,668,669,1,0,0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,671,1,0,0,0,671,672,
	5,125,0,0,672,182,1,0,0,0,673,674,7,10,0,0,674,184,1,0,0,0,675,676,7,11,
	0,0,676,186,1,0,0,0,677,678,8,12,0,0,678,188,1,0,0,0,679,680,5,45,0,0,680,
	681,5,45,0,0,681,682,1,0,0,0,682,683,6,94,0,0,683,684,1,0,0,0,684,685,6,
	94,1,0,685,190,1,0,0,0,686,687,5,47,0,0,687,688,5,42,0,0,688,692,1,0,0,
	0,689,691,9,0,0,0,690,689,1,0,0,0,691,694,1,0,0,0,692,693,1,0,0,0,692,690,
	1,0,0,0,693,698,1,0,0,0,694,692,1,0,0,0,695,696,5,42,0,0,696,699,5,47,0,
	0,697,699,5,0,0,1,698,695,1,0,0,0,698,697,1,0,0,0,699,700,1,0,0,0,700,701,
	6,95,2,0,701,192,1,0,0,0,702,704,7,13,0,0,703,702,1,0,0,0,704,705,1,0,0,
	0,705,703,1,0,0,0,705,706,1,0,0,0,706,707,1,0,0,0,707,708,6,96,1,0,708,
	194,1,0,0,0,709,710,7,14,0,0,710,711,1,0,0,0,711,712,6,97,3,0,712,196,1,
	0,0,0,713,714,5,35,0,0,714,716,4,98,0,0,715,717,5,33,0,0,716,715,1,0,0,
	0,716,717,1,0,0,0,717,721,1,0,0,0,718,720,3,187,93,0,719,718,1,0,0,0,720,
	723,1,0,0,0,721,719,1,0,0,0,721,722,1,0,0,0,722,724,1,0,0,0,723,721,1,0,
	0,0,724,725,6,98,1,0,725,198,1,0,0,0,39,0,477,483,485,493,495,504,521,525,
	530,533,540,545,551,555,561,564,569,573,580,586,590,598,601,608,612,616,
	621,625,630,636,642,655,669,692,698,705,716,721,4,1,94,0,0,1,0,6,0,0,0,
	2,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!LuaLexer.__ATN) {
			LuaLexer.__ATN = new ATNDeserializer().deserialize(LuaLexer._serializedATN);
		}

		return LuaLexer.__ATN;
	}


	static DecisionsToDFA = LuaLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}